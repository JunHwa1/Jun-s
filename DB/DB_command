CREATE DATABASE study CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;  

CREATE USER JUNHWA@localhost IDENTIFIED BY "wnsghk164*";

GRANT ALL PRIVILEGES ON study.* TO JUNHWA@localhost; 

SHOW GRANTS FOR JUNHWA@localhost;

SELECT GRANTEE, PRIVILEGE_TYPE, IS_GRANTABLE FROM INFORMATION_SCHEMA.USER_PRIVILEGES;

CREATE TABLE Person(
    PersonID int,
    FirstName VARCHAR(255),
    LastName VARCHAR(255),
    Address VARCHAR(255),
    City VARCHAR(255)
);

CREATE TABLE Person(
    PersonID int NOT NULL AUTO_INCREMENT,
    FirstName VARCHAR(255),
    LastName VARCHAR(255),
    Address VARCHAR(255),
    City VARCHAR(255),
    PRIMARY KEY(PersonID)
);

INSERT INTO Person(FirstName, LastName, Address, City) 
        VALUES ("JUNHWA", "JEONG", "KOREA", "SEOUL");

ALTER TABLE Person ADD Email VARCHAR(255);


실습1
테이블명: Students
StudentID - 학번 (빈값 허용안함, 자동증가)
Name - 이름
Age - 나이
Address - 주소

CREATE TABLE Students(
    StudentID int NOT NULL AUTO_INCREMENT,
    Name VARCHAR(255),
    Age VARCHAR(255),
    Address VARCHAR(255),
    PRIMARY KEY(StudentID)
); 

# 강사님 풀이

CREATE TABLE Students (
    StudentID INT NOT NULL AUTO_INCREMENT,
    Name VARCHAR(32),
    Age INT,
    Address VARCHAR(255),
    PRIMARY KEY(StudentID)
);

실습2
테이블명: Grades
StudentID - 학번
Math - 수학점수
English - 영어점수
Science - 과학점수

CREATE TABLE Grades(
    StudentID int,
    Math VARCHAR(255),
    English VARCHAR(255),
    Science VARCHAR(255)
);

# 강사님 풀이

CREATE TABLE Grades (
    StudentID INT,
    Math INT,
    English INT,
    Science INT
);

INSERT INTO Students (Name, Age, Address) 
    VALUES ("정준화", 27, "서울");

UPDATE Students SET Age=25 WHERE StudentID=1;

DELETE FROM Students WHERE Age=25; 

실습
Q. 각 테이블에 데이터를 입력해주세요.
   테이블명: Students
   Name: 홍길동, Age: 30, Address: 인천
   Name: 이연걸, Age: 60, Address: 서울
   Name: 이몽룡, Age: 42, Address: 대전
   Name: 성춘향, Age: 27, Address: 경기

   테이블명: Grades
   StudentID: 홍길동의 StudentID(숫자), Math: 90, English: 80, Science: 50
   StudentID: 이연걸의 StudentID(숫자), Math: 69, English: 76, Science: 65
   StudentID: 이몽룡의 StudentID(숫자), Math: 98, English: 87, Science: 97
   StudentID: 성춘향의 StudentID(숫자), Math: 87, English: 67, Science: 79

-- Students
INSERT INTO Students (Name, Age, Address)
    VALUES ("홍길동", 30, "인천");
INSERT INTO Students (Name, Age, Address)
    VALUES ("이연결", 60, "서울");
INSERT INTO Students (Name, Age, Address)
    VALUES ("이몽룡", 42, "대전");
INSERT INTO Students (Name, Age, Address)
    VALUES ("성춘향", 27, "경기");    

-- Grades
INSERT INTO Grades (StudentID, Math, English, Science)
    VALUES (1, 90, 80, 50);
INSERT INTO Grades (StudentID, Math, English, Science)
    VALUES (2, 69, 76, 65);
INSERT INTO Grades (StudentID, Math, English, Science)
    VALUES (3, 98, 87, 95);
INSERT INTO Grades (StudentID, Math, English, Science)
    VALUES (4, 87, 67, 79);

UPDATE Grades SET Science = 97 WHERE StudentID=3; 

INSERT INTO Grades (StudentID, Math, English, Science)
    VALUES (3, 99, 89, 92);

UPDATE Grades SET English = 91 WHERE StudentID=3 AND English=89; 


-- SELECT 실습

-- Q. 고객(Customer) 의 이름과 국가를 조회
SELECT CustomerName, Country FROM Customers;

-- Q. 고객(Customer) 의 정보 전체 조회
SELECT * FROM Customers;

-- Q. 고객(Customer) 의 국가(Country) 목록 조회 (중복 x)
SELECT DISTINCT Country FROM Customers;

-- Q. 국가(Country) 가 France 인 고객(Customer) 조회
SELECT *
FROM Customers
WHERE Country="France";

-- 고객(Customers) 테이블에서
-- Q. 이름(ContactName) 이 ‘Mar’로 시작하는 직원 조회

SELECT *
FROM Customers
WHERE ContactName LIKE "Mar%"; 

-- 고객(Customers) 테이블에서
-- Q. 이름(ContactName) 이 ‘et’로 끝나는 직원 조회

SELECT *
FROM Customers
WHERE ContactName LIKE "%et"; 

-- Q. 국가(Country)가 France이고 이름(ContactName)이
-- ‘La’로 시작하는 고객(Customers) 조회

SELECT *
FROM Customers 
WHERE Country="France" AND ContactName LIKE "La%";

-- Q. 국가(Country)가 France이거나 이름(ContactName)
-- 이 ‘La’로 시작하는 고객(Customers) 조회

SELECT *
FROM Customers
WHERE Country="France" OR ContactName LIKE "La%";


-- Q. 국가(Country)가 France가 아닌
-- 고객(Customers) 조회

SELECT * 
FROM Customers
WHERE NOT Country="France";


-- Q. 국가(Country)가 France 혹은 Spain에 사는
-- 고객(Customers) 조회

SELECT *
FROM Customers
WHERE Country IN ("France", "Spain");


-- Q. 가격(Price)이 15에서 20사이인 상품(Products) 조회

SELECT *
FROM Products
WHERE Price BETWEEN 15 AND 20;
-- 처음과 끝 값 모두 포함


-- Q. 우편번호(PostalCode)가 NULL인 고객(Customers) 조회

SELECT *
FROM Customers
WHERE PostalCode IS NULL;

-- 문제에서 NULL 값이 아니라 "" 으로 채워넣어서 안 나옴.

UPDATE Customers SET PostalCode=NULL WHERE PostalCode="";
-- NULL 값을 ""(공백) 으로 바꿔줌.

SELECT *
FROM Customers
WHERE PostalCode IS NULL;
-- 다시 해주면 ""(공백) 값이 NULL 값으로 바뀐 것들이 나옴.


-- Q. 우편번호(PostalCode)가 NULL이 아닌 고객 (Customers) 조회

SELECT *
FROM Customers
WHERE PostalCode IS NOT NULL; 


-- Q. 고객이름(CustomerName) 오름차순 조회

SELECT CustomerName
FROM Customers
ORDER BY CustomerName ASC;

SELECT CustomerName
FROM Customers
WHERE CustomerName LIKE "R%"
ORDER BY CustomerName ASC;
-- WHERE 조건문 쓸려면 순서가 ORDER BY 앞에 무조건 와야 됨.


-- Q. 상품가격(Price) 내림차순 조회

SELECT Price
FROM Products
ORDER BY Price DESC;


-- Q. 10명만 조회

SELECT *
FROM Customers
LIMIT 10;

-- Q. 그 다음 10명 조회

SELECT *
FROM Customers
LIMIT 10 OFFSET 10;


-- Q. 상품가격(Price)이 30 미만이면 ‘저‘, 30~50이면 ‘중‘,
--     50 초과는 ‘고’로 조회

SELECT Price,
CASE 
    WHEN Price < 30 THEN "저"
    WHEN Price BETWEEN 30 AND 50 THEN "중"
    ELSE "고"
END
FROM Products;


-- Q. 위 조회한 CASE의 이름을 ‘Level’으로 바꿔주세요

SELECT Price,
CASE
    WHEN Price < 30 THEN "저"
    WHEN Price BETWEEN 30 AND 50 THEN "중"
    ELSE "고"
END AS "Level"
FROM Products;


SELECT Price,
CASE
    WHEN Price < 30 THEN "저"
    WHEN Price BETWEEN 30 AND 50 THEN "중"
    ELSE "고"
END AS "Level"
FROM Products
WHERE Level="저";


-- Q. 국가(Country)가 France에 사는
-- 고객(Customers)수 조회

SELECT COUNT(*)
FROM Customers
WHERE Country='France';


SELECT COUNT(*) AS FranceCustomers
FROM Customers
WHERE Country='France';


-- Q. 전체 상품(Products)의 평균 가격(Price) 계산

SELECT AVG(Price) 
FROM Products;


SELECT AVG(Price) AS MeanPrice
FROM Products;


-- Q. 주문상품 수량(Quantity) 합계 계산

SELECT SUM(Quantity) AS TotalQuantity
FROM OrderDetails;


SELECT SUM(Quantity) AS TotalQuantity
FROM OrderDetails
WHERE OrderID=10248;


--  Q. 가격(Price) 최소값 조회

SELECT MIN(Price)
FROM Products;

-- Q. 가격(Price) 최대값 조회

SELECT MAX(Price)
FROM Products;


-- Q. 국가(Country)별 고객수 조회 (고객수 기준 오름차순)

SELECT Country, COUNT(*) 
FROM Customers
GROUP BY Country
ORDER BY COUNT(*) ASC;


SELECT Country, COUNT(*) AS Customer 
FROM Customers
GROUP BY Country
ORDER BY Customer ASC;


-- Q. 국가(Country)별, 도시(City)별 고객수 조회 (고객수 기준 내림차순)

SELECT Country, City, COUNT(*) AS Customer
FROM Customers
GROUP BY Country, City
ORDER BY Customer DESC;


-- Q. 국가(Country)별 고객수를 조회하고 그 중 5명 초과인
-- 국가만 조회 (고객수 기준 내림차순)

SELECT Country, COUNT(*) AS Customer
FROM Customers
GROUP BY Country
HAVING Customer > 5
ORDER BY Customer DESC;


-- Q. 영국에 사는 고객 중, City 가 London 인 고객의 이름과 주소 조회

SELECT CustomerName, Address
FROM(
    SELECT CustomerName, Address, City
    FROM Customers
    WHERE Country="UK"
)
WHERE City="London";


-- Q. 주문상세와 전체 Quantity 를 조회

SELECT *, (
    SELECT SUM(Quantity)
    FROM OrderDetails
) AS TotalQuantity
FROM OrderDetails; 


-- 실습

-- Q. 직원(Employees)중 이름(LastName)이 ‘King’인 직원의 이름과 
-- 생일(BirthDate)과 노트(Notes)를 조회해주세요.

SELECT LastName, BirthDate, Notes
FROM Employees
WHERE LastName="King";


-- Q. 상품(Products)중 상품명(ProductName)이 ‘C’로 시작하고 가격(Price)이
--  20보다 큰 상품의 상품명과 가격을 가격이 비싼순으로 조회해주세요.

SELECT ProductName, Price
FROM Products
WHERE ProductName LIKE "C%" AND Price > 20
ORDER BY Price DESC;


-- Q. 상품(Products)의 카테고리아이디(CategoryID) 별로 상품가격의 합,
--  가장 비싼 상품 가격, 가장 저렴한 상품 가격을 구하세요.

SELECT SUM(Price), MAX(Price), MIN(Price)
FROM Products 
GROUP BY CategoryID;


-- Q. 상품(Products)의 카테고리아이디(CategoryID) 별로 상품개수와 
--  상품개수가 10개가 넘을경우 많음 아니면 적음이 표시되어있는 
--  칼럼을 하나 추가하고 상품수가 많은 순서대로 조회해주세요

-- 실패 풀이
SELECT CategoryID, COUNT(*)
FROM Products 
GROUP BY CategoryID
ORDER BY COUNT(*) DESC
SELECT CategoryID, COUNT(*),
CASE
    WHEN COUNT(*) >= 10 THEN "많음"
    ELSE "적음"
END AS "Product_Quantity"
FROM Products;

-- 실패 풀이
SELECT CategoryID, COUNT(*)
FROM Products 
GROUP BY CategoryID
CASE
    WHEN COUNT(*) THEN "많음"
    ELSE "적음"
END 
FROM Products;

-- 내 최종 풀이 
SELECT CategoryID, COUNT(*) AS ProductCount,
    CASE
        WHEN COUNT(*) >= 10 THEN "많음"
        ELSE "적음"
    END AS "10개 기준"
FROM Products 
GROUP BY CategoryID
ORDER BY ProductCount DESC;


-- Q. 고객(Customers)의 국가(Country)별 고객수와
--   백분위 (국가별고객수 / 전체고객수 * 100)을 구하세요

-- 내 풀이 실패
SELECT Country, COUNT(*), COUNT(*)/COUNT(*) * 100
FROM Customers
GROUP BY Country;

- 내 풀이 실패
SELECT Country, COUNT(*) AS CustomerCount, 
    (COUNT(*) / (SELECT COUNT(*) FROM Customers) * 100) AS Percentage
FROM Customers
GROUP BY Country; 